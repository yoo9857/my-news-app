"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-oauth";
exports.ids = ["vendor-chunks/@react-oauth"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-oauth/google/dist/index.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@react-oauth/google/dist/index.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GoogleLogin: () => (/* binding */ GoogleLogin),\n/* harmony export */   GoogleOAuthProvider: () => (/* binding */ GoogleOAuthProvider),\n/* harmony export */   googleLogout: () => (/* binding */ googleLogout),\n/* harmony export */   hasGrantedAllScopesGoogle: () => (/* binding */ hasGrantedAllScopesGoogle),\n/* harmony export */   hasGrantedAnyScopeGoogle: () => (/* binding */ hasGrantedAnyScopeGoogle),\n/* harmony export */   useGoogleLogin: () => (/* binding */ useGoogleLogin),\n/* harmony export */   useGoogleOAuth: () => (/* binding */ useGoogleOAuth),\n/* harmony export */   useGoogleOneTapLogin: () => (/* binding */ useGoogleOneTapLogin)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ GoogleLogin,GoogleOAuthProvider,googleLogout,hasGrantedAllScopesGoogle,hasGrantedAnyScopeGoogle,useGoogleLogin,useGoogleOAuth,useGoogleOneTapLogin auto */ \nfunction useLoadGsiScript(options = {}) {\n    const { nonce, onScriptLoadSuccess, onScriptLoadError } = options;\n    const [scriptLoadedSuccessfully, setScriptLoadedSuccessfully] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const onScriptLoadSuccessRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onScriptLoadSuccess);\n    onScriptLoadSuccessRef.current = onScriptLoadSuccess;\n    const onScriptLoadErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onScriptLoadError);\n    onScriptLoadErrorRef.current = onScriptLoadError;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const scriptTag = document.createElement(\"script\");\n        scriptTag.src = \"https://accounts.google.com/gsi/client\";\n        scriptTag.async = true;\n        scriptTag.defer = true;\n        scriptTag.nonce = nonce;\n        scriptTag.onload = ()=>{\n            var _a;\n            setScriptLoadedSuccessfully(true);\n            (_a = onScriptLoadSuccessRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadSuccessRef);\n        };\n        scriptTag.onerror = ()=>{\n            var _a;\n            setScriptLoadedSuccessfully(false);\n            (_a = onScriptLoadErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadErrorRef);\n        };\n        document.body.appendChild(scriptTag);\n        return ()=>{\n            document.body.removeChild(scriptTag);\n        };\n    }, [\n        nonce\n    ]);\n    return scriptLoadedSuccessfully;\n}\nconst GoogleOAuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nfunction GoogleOAuthProvider({ clientId, nonce, onScriptLoadSuccess, onScriptLoadError, children }) {\n    const scriptLoadedSuccessfully = useLoadGsiScript({\n        nonce,\n        onScriptLoadSuccess,\n        onScriptLoadError\n    });\n    const contextValue = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            clientId,\n            scriptLoadedSuccessfully\n        }), [\n        clientId,\n        scriptLoadedSuccessfully\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(GoogleOAuthContext.Provider, {\n        value: contextValue\n    }, children);\n}\nfunction useGoogleOAuth() {\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(GoogleOAuthContext);\n    if (!context) {\n        throw new Error(\"Google OAuth components must be used within GoogleOAuthProvider\");\n    }\n    return context;\n}\nfunction extractClientId(credentialResponse) {\n    var _a;\n    const clientId = (_a = credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.clientId) !== null && _a !== void 0 ? _a : credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.client_id;\n    return clientId;\n}\nconst containerHeightMap = {\n    large: 40,\n    medium: 32,\n    small: 20\n};\nfunction GoogleLogin({ onSuccess, onError, useOneTap, promptMomentNotification, type = \"standard\", theme = \"outline\", size = \"large\", text, shape, logo_alignment, width, locale, click_listener, containerProps, ...props }) {\n    const btnContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\n    const onSuccessRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onSuccess);\n    onSuccessRef.current = onSuccess;\n    const onErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onError);\n    onErrorRef.current = onError;\n    const promptMomentNotificationRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(promptMomentNotification);\n    promptMomentNotificationRef.current = promptMomentNotification;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (!scriptLoadedSuccessfully) return;\n        (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.id) === null || _c === void 0 ? void 0 : _c.initialize({\n            client_id: clientId,\n            callback: (credentialResponse)=>{\n                var _a;\n                if (!(credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.credential)) {\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\n                }\n                const { credential, select_by } = credentialResponse;\n                onSuccessRef.current({\n                    credential,\n                    clientId: extractClientId(credentialResponse),\n                    select_by\n                });\n            },\n            ...props\n        });\n        (_f = (_e = (_d = window === null || window === void 0 ? void 0 : window.google) === null || _d === void 0 ? void 0 : _d.accounts) === null || _e === void 0 ? void 0 : _e.id) === null || _f === void 0 ? void 0 : _f.renderButton(btnContainerRef.current, {\n            type,\n            theme,\n            size,\n            text,\n            shape,\n            logo_alignment,\n            width,\n            locale,\n            click_listener\n        });\n        if (useOneTap) (_j = (_h = (_g = window === null || window === void 0 ? void 0 : window.google) === null || _g === void 0 ? void 0 : _g.accounts) === null || _h === void 0 ? void 0 : _h.id) === null || _j === void 0 ? void 0 : _j.prompt(promptMomentNotificationRef.current);\n        return ()=>{\n            var _a, _b, _c;\n            if (useOneTap) (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.id) === null || _c === void 0 ? void 0 : _c.cancel();\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        clientId,\n        scriptLoadedSuccessfully,\n        useOneTap,\n        type,\n        theme,\n        size,\n        text,\n        shape,\n        logo_alignment,\n        width,\n        locale\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        ...containerProps,\n        ref: btnContainerRef,\n        style: {\n            height: containerHeightMap[size],\n            ...containerProps === null || containerProps === void 0 ? void 0 : containerProps.style\n        }\n    });\n}\nfunction googleLogout() {\n    var _a, _b, _c;\n    (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.id) === null || _c === void 0 ? void 0 : _c.disableAutoSelect();\n}\n/* eslint-disable import/export */ function useGoogleLogin({ flow = \"implicit\", scope = \"\", onSuccess, onError, onNonOAuthError, overrideScope, state, ...props }) {\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\n    const clientRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const onSuccessRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onSuccess);\n    onSuccessRef.current = onSuccess;\n    const onErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onError);\n    onErrorRef.current = onError;\n    const onNonOAuthErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onNonOAuthError);\n    onNonOAuthErrorRef.current = onNonOAuthError;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a, _b;\n        if (!scriptLoadedSuccessfully) return;\n        const clientMethod = flow === \"implicit\" ? \"initTokenClient\" : \"initCodeClient\";\n        const client = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.oauth2[clientMethod]({\n            client_id: clientId,\n            scope: overrideScope ? scope : `openid profile email ${scope}`,\n            callback: (response)=>{\n                var _a, _b;\n                if (response.error) return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef, response);\n                (_b = onSuccessRef.current) === null || _b === void 0 ? void 0 : _b.call(onSuccessRef, response);\n            },\n            error_callback: (nonOAuthError)=>{\n                var _a;\n                (_a = onNonOAuthErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onNonOAuthErrorRef, nonOAuthError);\n            },\n            state,\n            ...props\n        });\n        clientRef.current = client;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        clientId,\n        scriptLoadedSuccessfully,\n        flow,\n        scope,\n        state\n    ]);\n    const loginImplicitFlow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((overrideConfig)=>{\n        var _a;\n        return (_a = clientRef.current) === null || _a === void 0 ? void 0 : _a.requestAccessToken(overrideConfig);\n    }, []);\n    const loginAuthCodeFlow = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        var _a;\n        return (_a = clientRef.current) === null || _a === void 0 ? void 0 : _a.requestCode();\n    }, []);\n    return flow === \"implicit\" ? loginImplicitFlow : loginAuthCodeFlow;\n}\nfunction useGoogleOneTapLogin({ onSuccess, onError, promptMomentNotification, cancel_on_tap_outside, prompt_parent_id, state_cookie_domain, hosted_domain, use_fedcm_for_prompt = false, use_fedcm_for_button = false, disabled, auto_select }) {\n    const { clientId, scriptLoadedSuccessfully } = useGoogleOAuth();\n    const onSuccessRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onSuccess);\n    onSuccessRef.current = onSuccess;\n    const onErrorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onError);\n    onErrorRef.current = onError;\n    const promptMomentNotificationRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(promptMomentNotification);\n    promptMomentNotificationRef.current = promptMomentNotification;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (!scriptLoadedSuccessfully) return;\n        if (disabled) {\n            (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.id) === null || _c === void 0 ? void 0 : _c.cancel();\n            return;\n        }\n        (_f = (_e = (_d = window === null || window === void 0 ? void 0 : window.google) === null || _d === void 0 ? void 0 : _d.accounts) === null || _e === void 0 ? void 0 : _e.id) === null || _f === void 0 ? void 0 : _f.initialize({\n            client_id: clientId,\n            callback: (credentialResponse)=>{\n                var _a;\n                if (!(credentialResponse === null || credentialResponse === void 0 ? void 0 : credentialResponse.credential)) {\n                    return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\n                }\n                const { credential, select_by } = credentialResponse;\n                onSuccessRef.current({\n                    credential,\n                    clientId: extractClientId(credentialResponse),\n                    select_by\n                });\n            },\n            hosted_domain,\n            cancel_on_tap_outside,\n            prompt_parent_id,\n            state_cookie_domain,\n            use_fedcm_for_prompt,\n            use_fedcm_for_button,\n            auto_select\n        });\n        (_j = (_h = (_g = window === null || window === void 0 ? void 0 : window.google) === null || _g === void 0 ? void 0 : _g.accounts) === null || _h === void 0 ? void 0 : _h.id) === null || _j === void 0 ? void 0 : _j.prompt(promptMomentNotificationRef.current);\n        return ()=>{\n            var _a, _b, _c;\n            (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.id) === null || _c === void 0 ? void 0 : _c.cancel();\n        };\n    }, [\n        clientId,\n        scriptLoadedSuccessfully,\n        cancel_on_tap_outside,\n        prompt_parent_id,\n        state_cookie_domain,\n        hosted_domain,\n        use_fedcm_for_prompt,\n        use_fedcm_for_button,\n        disabled,\n        auto_select\n    ]);\n}\n/**\r\n * Checks if the user granted all the specified scope or scopes\r\n * @returns True if all the scopes are granted\r\n */ function hasGrantedAllScopesGoogle(tokenResponse, firstScope, ...restScopes) {\n    var _a, _b, _c;\n    if (!(window === null || window === void 0 ? void 0 : window.google)) return false;\n    return ((_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.oauth2) === null || _c === void 0 ? void 0 : _c.hasGrantedAllScopes(tokenResponse, firstScope, ...restScopes)) || false;\n}\n/**\r\n * Checks if the user granted any of the specified scope or scopes.\r\n * @returns True if any of the scopes are granted\r\n */ function hasGrantedAnyScopeGoogle(tokenResponse, firstScope, ...restScopes) {\n    var _a, _b, _c;\n    if (!(window === null || window === void 0 ? void 0 : window.google)) return false;\n    return ((_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.google) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b.oauth2) === null || _c === void 0 ? void 0 : _c.hasGrantedAnyScope(tokenResponse, firstScope, ...restScopes)) || false;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-oauth/google/dist/index.esm.js\n");

/***/ })

};
;